/* tslint:disable */
/* eslint-disable */
/**
 * Todo Microservice API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AuthResponse,
  CollaboratorDetail,
  LoginRequest,
  MatrixAuthResponse,
  MatrixOpenIDRequest,
  NewCollaborator,
  NewTodoItem,
  NewTodoList,
  RegisterRequest,
  TodoItem,
  TodoList,
  UpdateTodoItem,
  UpdateTodoList,
  User,
} from '../models/index';
import {
  AuthResponseFromJSON,
  AuthResponseToJSON,
  CollaboratorDetailFromJSON,
  CollaboratorDetailToJSON,
  LoginRequestFromJSON,
  LoginRequestToJSON,
  MatrixAuthResponseFromJSON,
  MatrixAuthResponseToJSON,
  MatrixOpenIDRequestFromJSON,
  MatrixOpenIDRequestToJSON,
  NewCollaboratorFromJSON,
  NewCollaboratorToJSON,
  NewTodoItemFromJSON,
  NewTodoItemToJSON,
  NewTodoListFromJSON,
  NewTodoListToJSON,
  RegisterRequestFromJSON,
  RegisterRequestToJSON,
  TodoItemFromJSON,
  TodoItemToJSON,
  TodoListFromJSON,
  TodoListToJSON,
  UpdateTodoItemFromJSON,
  UpdateTodoItemToJSON,
  UpdateTodoListFromJSON,
  UpdateTodoListToJSON,
  UserFromJSON,
  UserToJSON,
} from '../models/index';

export interface AddCollaboratorRequest {
  listId: string;
  newCollaborator: NewCollaborator;
}

export interface CreateTodoItemRequest {
  listId: string;
  newTodoItem: NewTodoItem;
}

export interface CreateTodoListRequest {
  newTodoList: NewTodoList;
}

export interface DeleteTodoItemRequest {
  listId: string;
  itemId: string;
}

export interface DeleteTodoListRequest {
  listId: string;
}

export interface GetCollaboratorsRequest {
  listId: string;
}

export interface GetTodoItemByIdRequest {
  listId: string;
  itemId: string;
}

export interface GetTodoItemsByListIdRequest {
  listId: string;
}

export interface GetTodoListByIdRequest {
  listId: string;
}

export interface GetTodoListsByUserIdRequest {
  userId: string;
}

export interface LoginPostRequest {
  loginRequest: LoginRequest;
}

export interface PostMatrixAuthRequest {
  matrixOpenIDRequest: MatrixOpenIDRequest;
}

export interface RegisterPostRequest {
  registerRequest: RegisterRequest;
}

export interface RemoveCollaboratorRequest {
  listId: string;
  userId: string;
}

export interface UpdateTodoItemRequest {
  listId: string;
  itemId: string;
  updateTodoItem: UpdateTodoItem;
}

export interface UpdateTodoListRequest {
  listId: string;
  updateTodoList: UpdateTodoList;
}

export interface UsersIdGetRequest {
  id: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Add a collaborator to a todo list
   */
  async addCollaboratorRaw(
    requestParameters: AddCollaboratorRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling addCollaborator().'
      );
    }

    if (requestParameters['newCollaborator'] == null) {
      throw new runtime.RequiredError(
        'newCollaborator',
        'Required parameter "newCollaborator" was null or undefined when calling addCollaborator().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/collaborators`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewCollaboratorToJSON(requestParameters['newCollaborator']),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add a collaborator to a todo list
   */
  async addCollaborator(
    requestParameters: AddCollaboratorRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addCollaboratorRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new todo item in a list
   */
  async createTodoItemRaw(
    requestParameters: CreateTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoItem>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling createTodoItem().'
      );
    }

    if (requestParameters['newTodoItem'] == null) {
      throw new runtime.RequiredError(
        'newTodoItem',
        'Required parameter "newTodoItem" was null or undefined when calling createTodoItem().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/items`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewTodoItemToJSON(requestParameters['newTodoItem']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemFromJSON(jsonValue));
  }

  /**
   * Create a new todo item in a list
   */
  async createTodoItem(
    requestParameters: CreateTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoItem> {
    const response = await this.createTodoItemRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create a new todo list
   */
  async createTodoListRaw(
    requestParameters: CreateTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoList>> {
    if (requestParameters['newTodoList'] == null) {
      throw new runtime.RequiredError(
        'newTodoList',
        'Required parameter "newTodoList" was null or undefined when calling createTodoList().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: NewTodoListToJSON(requestParameters['newTodoList']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoListFromJSON(jsonValue));
  }

  /**
   * Create a new todo list
   */
  async createTodoList(
    requestParameters: CreateTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoList> {
    const response = await this.createTodoListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Delete a todo item
   */
  async deleteTodoItemRaw(
    requestParameters: DeleteTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling deleteTodoItem().'
      );
    }

    if (requestParameters['itemId'] == null) {
      throw new runtime.RequiredError(
        'itemId',
        'Required parameter "itemId" was null or undefined when calling deleteTodoItem().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/items/{itemId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );
    urlPath = urlPath.replace(
      `{${'itemId'}}`,
      encodeURIComponent(String(requestParameters['itemId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a todo item
   */
  async deleteTodoItem(
    requestParameters: DeleteTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteTodoItemRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a todo list
   */
  async deleteTodoListRaw(
    requestParameters: DeleteTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling deleteTodoList().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a todo list
   */
  async deleteTodoList(
    requestParameters: DeleteTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteTodoListRaw(requestParameters, initOverrides);
  }

  /**
   * Get collaborators for a todo list
   */
  async getCollaboratorsRaw(
    requestParameters: GetCollaboratorsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CollaboratorDetail>>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling getCollaborators().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/collaborators`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CollaboratorDetailFromJSON)
    );
  }

  /**
   * Get collaborators for a todo list
   */
  async getCollaborators(
    requestParameters: GetCollaboratorsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CollaboratorDetail>> {
    const response = await this.getCollaboratorsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a todo item by ID
   */
  async getTodoItemByIdRaw(
    requestParameters: GetTodoItemByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoItem>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling getTodoItemById().'
      );
    }

    if (requestParameters['itemId'] == null) {
      throw new runtime.RequiredError(
        'itemId',
        'Required parameter "itemId" was null or undefined when calling getTodoItemById().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/items/{itemId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );
    urlPath = urlPath.replace(
      `{${'itemId'}}`,
      encodeURIComponent(String(requestParameters['itemId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemFromJSON(jsonValue));
  }

  /**
   * Get a todo item by ID
   */
  async getTodoItemById(
    requestParameters: GetTodoItemByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoItem> {
    const response = await this.getTodoItemByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get todo items by list ID
   */
  async getTodoItemsByListIdRaw(
    requestParameters: GetTodoItemsByListIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TodoItem>>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling getTodoItemsByListId().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/items`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoItemFromJSON));
  }

  /**
   * Get todo items by list ID
   */
  async getTodoItemsByListId(
    requestParameters: GetTodoItemsByListIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TodoItem>> {
    const response = await this.getTodoItemsByListIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get a todo list by ID
   */
  async getTodoListByIdRaw(
    requestParameters: GetTodoListByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoList>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling getTodoListById().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoListFromJSON(jsonValue));
  }

  /**
   * Get a todo list by ID
   */
  async getTodoListById(
    requestParameters: GetTodoListByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoList> {
    const response = await this.getTodoListByIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get todo lists by owner ID
   */
  async getTodoListsByUserIdRaw(
    requestParameters: GetTodoListsByUserIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<TodoList>>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling getTodoListsByUserId().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TodoListFromJSON));
  }

  /**
   * Get todo lists by owner ID
   */
  async getTodoListsByUserId(
    requestParameters: GetTodoListsByUserIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<TodoList>> {
    const response = await this.getTodoListsByUserIdRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Log in a user
   */
  async loginPostRaw(
    requestParameters: LoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthResponse>> {
    if (requestParameters['loginRequest'] == null) {
      throw new runtime.RequiredError(
        'loginRequest',
        'Required parameter "loginRequest" was null or undefined when calling loginPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/login`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginRequestToJSON(requestParameters['loginRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
  }

  /**
   * Log in a user
   */
  async loginPost(
    requestParameters: LoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthResponse> {
    const response = await this.loginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Authenticate using Matrix OpenID
   */
  async postMatrixAuthRaw(
    requestParameters: PostMatrixAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<MatrixAuthResponse>> {
    if (requestParameters['matrixOpenIDRequest'] == null) {
      throw new runtime.RequiredError(
        'matrixOpenIDRequest',
        'Required parameter "matrixOpenIDRequest" was null or undefined when calling postMatrixAuth().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/auth/matrix/openid`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: MatrixOpenIDRequestToJSON(requestParameters['matrixOpenIDRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MatrixAuthResponseFromJSON(jsonValue)
    );
  }

  /**
   * Authenticate using Matrix OpenID
   */
  async postMatrixAuth(
    requestParameters: PostMatrixAuthRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<MatrixAuthResponse> {
    const response = await this.postMatrixAuthRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Register a new user
   */
  async registerPostRaw(
    requestParameters: RegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AuthResponse>> {
    if (requestParameters['registerRequest'] == null) {
      throw new runtime.RequiredError(
        'registerRequest',
        'Required parameter "registerRequest" was null or undefined when calling registerPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/register`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterRequestToJSON(requestParameters['registerRequest']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
  }

  /**
   * Register a new user
   */
  async registerPost(
    requestParameters: RegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AuthResponse> {
    const response = await this.registerPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Remove a collaborator from a todo list
   */
  async removeCollaboratorRaw(
    requestParameters: RemoveCollaboratorRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling removeCollaborator().'
      );
    }

    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling removeCollaborator().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/collaborators/{userId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );
    urlPath = urlPath.replace(
      `{${'userId'}}`,
      encodeURIComponent(String(requestParameters['userId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove a collaborator from a todo list
   */
  async removeCollaborator(
    requestParameters: RemoveCollaboratorRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.removeCollaboratorRaw(requestParameters, initOverrides);
  }

  /**
   * Update a todo item
   */
  async updateTodoItemRaw(
    requestParameters: UpdateTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoItem>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling updateTodoItem().'
      );
    }

    if (requestParameters['itemId'] == null) {
      throw new runtime.RequiredError(
        'itemId',
        'Required parameter "itemId" was null or undefined when calling updateTodoItem().'
      );
    }

    if (requestParameters['updateTodoItem'] == null) {
      throw new runtime.RequiredError(
        'updateTodoItem',
        'Required parameter "updateTodoItem" was null or undefined when calling updateTodoItem().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}/items/{itemId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );
    urlPath = urlPath.replace(
      `{${'itemId'}}`,
      encodeURIComponent(String(requestParameters['itemId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateTodoItemToJSON(requestParameters['updateTodoItem']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemFromJSON(jsonValue));
  }

  /**
   * Update a todo item
   */
  async updateTodoItem(
    requestParameters: UpdateTodoItemRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoItem> {
    const response = await this.updateTodoItemRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update a todo list
   */
  async updateTodoListRaw(
    requestParameters: UpdateTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TodoList>> {
    if (requestParameters['listId'] == null) {
      throw new runtime.RequiredError(
        'listId',
        'Required parameter "listId" was null or undefined when calling updateTodoList().'
      );
    }

    if (requestParameters['updateTodoList'] == null) {
      throw new runtime.RequiredError(
        'updateTodoList',
        'Required parameter "updateTodoList" was null or undefined when calling updateTodoList().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/todolists/{listId}`;
    urlPath = urlPath.replace(
      `{${'listId'}}`,
      encodeURIComponent(String(requestParameters['listId']))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateTodoListToJSON(requestParameters['updateTodoList']),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoListFromJSON(jsonValue));
  }

  /**
   * Update a todo list
   */
  async updateTodoList(
    requestParameters: UpdateTodoListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TodoList> {
    const response = await this.updateTodoListRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get user by ID
   */
  async usersIdGetRaw(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<User>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling usersIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/users/{id}`;
    urlPath = urlPath.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters['id'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * Get user by ID
   */
  async usersIdGet(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<User> {
    const response = await this.usersIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get current user profile
   */
  async usersMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<User>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/users/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
  }

  /**
   * Get current user profile
   */
  async usersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
    const response = await this.usersMeGetRaw(initOverrides);
    return await response.value();
  }
}
