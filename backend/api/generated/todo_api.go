// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT token
	Token string `json:"token"`
	User  User   `json:"user"`
}

// CollaboratorDetail defines model for CollaboratorDetail.
type CollaboratorDetail struct {
	// CollaboratorId ID of the collaborator user
	CollaboratorId openapi_types.UUID `json:"collaborator_id"`

	// ListId ID of the todo list
	ListId openapi_types.UUID `json:"list_id"`

	// Username Collaborator username
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// MatrixAuthResponse defines model for MatrixAuthResponse.
type MatrixAuthResponse struct {
	// Mxid Matrix user ID
	Mxid string `json:"mxid"`

	// Token JWT token for authentication
	Token string `json:"token"`

	// UserId ID of the user in the todo service
	UserId openapi_types.UUID `json:"user_id"`
}

// MatrixOpenIDRequest defines model for MatrixOpenIDRequest.
type MatrixOpenIDRequest struct {
	// AccessToken Matrix OpenID access token
	AccessToken string `json:"access_token"`

	// MatrixServerName Matrix homeserver name
	MatrixServerName string `json:"matrix_server_name"`
}

// NewCollaborator defines model for NewCollaborator.
type NewCollaborator struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// NewTodoItem defines model for NewTodoItem.
type NewTodoItem struct {
	Completed   *bool              `json:"completed,omitempty"`
	Description *string            `json:"description,omitempty"`
	DueDate     *time.Time         `json:"due_date,omitempty"`
	ListId      openapi_types.UUID `json:"list_id"`
	Position    string             `json:"position"`
	Title       string             `json:"title"`
}

// NewTodoList defines model for NewTodoList.
type NewTodoList struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// TodoItem defines model for TodoItem.
type TodoItem struct {
	Completed   bool               `json:"completed"`
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Description *string            `json:"description,omitempty"`
	DueDate     *time.Time         `json:"due_date,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	ListId      openapi_types.UUID `json:"list_id"`

	// Position Fractional index for ordering todo items within a list.
	Position  string     `json:"position"`
	Title     string     `json:"title"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// TodoList defines model for TodoList.
type TodoList struct {
	CreatedAt   *time.Time         `json:"created_at,omitempty"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	OwnerId     openapi_types.UUID `json:"owner_id"`
	Title       string             `json:"title"`
	UpdatedAt   *time.Time         `json:"updated_at,omitempty"`
}

// UpdateTodoItem defines model for UpdateTodoItem.
type UpdateTodoItem struct {
	Completed   bool       `json:"completed"`
	Description string     `json:"description"`
	DueDate     *time.Time `json:"due_date,omitempty"`
	Position    string     `json:"position"`
	Title       string     `json:"title"`
}

// UpdateTodoList defines model for UpdateTodoList.
type UpdateTodoList struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// User defines model for User.
type User struct {
	// CreatedAt Timestamp when the user was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email Email of the user
	Email openapi_types.Email `json:"email"`

	// Id ID of the user
	Id openapi_types.UUID `json:"id"`

	// MatrixId Matrix ID of the user
	MatrixId string `json:"matrix_id"`

	// UpdatedAt Timestamp when the user was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// GetTodoListsByUserIdParams defines parameters for GetTodoListsByUserId.
type GetTodoListsByUserIdParams struct {
	// UserId ID of the user to retrieve todo lists for
	UserId openapi_types.UUID `form:"userId" json:"userId"`
}

// PostMatrixAuthJSONRequestBody defines body for PostMatrixAuth for application/json ContentType.
type PostMatrixAuthJSONRequestBody = MatrixOpenIDRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostRegisterJSONRequestBody defines body for PostRegister for application/json ContentType.
type PostRegisterJSONRequestBody = RegisterRequest

// CreateTodoListJSONRequestBody defines body for CreateTodoList for application/json ContentType.
type CreateTodoListJSONRequestBody = NewTodoList

// UpdateTodoListJSONRequestBody defines body for UpdateTodoList for application/json ContentType.
type UpdateTodoListJSONRequestBody = UpdateTodoList

// AddCollaboratorJSONRequestBody defines body for AddCollaborator for application/json ContentType.
type AddCollaboratorJSONRequestBody = NewCollaborator

// CreateTodoItemJSONRequestBody defines body for CreateTodoItem for application/json ContentType.
type CreateTodoItemJSONRequestBody = NewTodoItem

// UpdateTodoItemJSONRequestBody defines body for UpdateTodoItem for application/json ContentType.
type UpdateTodoItemJSONRequestBody = UpdateTodoItem

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate using Matrix OpenID
	// (POST /auth/matrix/openid)
	PostMatrixAuth(w http.ResponseWriter, r *http.Request)
	// Log in a user
	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /register)
	PostRegister(w http.ResponseWriter, r *http.Request)
	// Get todo lists by owner ID
	// (GET /todolists)
	GetTodoListsByUserId(w http.ResponseWriter, r *http.Request, params GetTodoListsByUserIdParams)
	// Create a new todo list
	// (POST /todolists)
	CreateTodoList(w http.ResponseWriter, r *http.Request)
	// Delete a todo list
	// (DELETE /todolists/{listId})
	DeleteTodoList(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Get a todo list by ID
	// (GET /todolists/{listId})
	GetTodoListById(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Update a todo list
	// (PUT /todolists/{listId})
	UpdateTodoList(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Get collaborators for a todo list
	// (GET /todolists/{listId}/collaborators)
	GetCollaborators(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Add a collaborator to a todo list
	// (POST /todolists/{listId}/collaborators)
	AddCollaborator(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Remove a collaborator from a todo list
	// (DELETE /todolists/{listId}/collaborators/{userId})
	RemoveCollaborator(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, userId openapi_types.UUID)
	// Get todo items by list ID
	// (GET /todolists/{listId}/items)
	GetTodoItemsByListId(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Create a new todo item in a list
	// (POST /todolists/{listId}/items)
	CreateTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID)
	// Delete a todo item
	// (DELETE /todolists/{listId}/items/{itemId})
	DeleteTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID)
	// Get a todo item by ID
	// (GET /todolists/{listId}/items/{itemId})
	GetTodoItemById(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID)
	// Update a todo item
	// (PUT /todolists/{listId}/items/{itemId})
	UpdateTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID)
	// Get current user profile
	// (GET /users/me)
	GetUsersMe(w http.ResponseWriter, r *http.Request)
	// Get user by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate using Matrix OpenID
// (POST /auth/matrix/openid)
func (_ Unimplemented) PostMatrixAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Log in a user
// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /register)
func (_ Unimplemented) PostRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get todo lists by owner ID
// (GET /todolists)
func (_ Unimplemented) GetTodoListsByUserId(w http.ResponseWriter, r *http.Request, params GetTodoListsByUserIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new todo list
// (POST /todolists)
func (_ Unimplemented) CreateTodoList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a todo list
// (DELETE /todolists/{listId})
func (_ Unimplemented) DeleteTodoList(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a todo list by ID
// (GET /todolists/{listId})
func (_ Unimplemented) GetTodoListById(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a todo list
// (PUT /todolists/{listId})
func (_ Unimplemented) UpdateTodoList(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get collaborators for a todo list
// (GET /todolists/{listId}/collaborators)
func (_ Unimplemented) GetCollaborators(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a collaborator to a todo list
// (POST /todolists/{listId}/collaborators)
func (_ Unimplemented) AddCollaborator(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove a collaborator from a todo list
// (DELETE /todolists/{listId}/collaborators/{userId})
func (_ Unimplemented) RemoveCollaborator(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get todo items by list ID
// (GET /todolists/{listId}/items)
func (_ Unimplemented) GetTodoItemsByListId(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new todo item in a list
// (POST /todolists/{listId}/items)
func (_ Unimplemented) CreateTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a todo item
// (DELETE /todolists/{listId}/items/{itemId})
func (_ Unimplemented) DeleteTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a todo item by ID
// (GET /todolists/{listId}/items/{itemId})
func (_ Unimplemented) GetTodoItemById(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a todo item
// (PUT /todolists/{listId}/items/{itemId})
func (_ Unimplemented) UpdateTodoItem(w http.ResponseWriter, r *http.Request, listId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user profile
// (GET /users/me)
func (_ Unimplemented) GetUsersMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{id})
func (_ Unimplemented) GetUsersId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostMatrixAuth operation middleware
func (siw *ServerInterfaceWrapper) PostMatrixAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMatrixAuth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegister operation middleware
func (siw *ServerInterfaceWrapper) PostRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoListsByUserId operation middleware
func (siw *ServerInterfaceWrapper) GetTodoListsByUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodoListsByUserIdParams

	// ------------- Required query parameter "userId" -------------

	if paramValue := r.URL.Query().Get("userId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "userId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoListsByUserId(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodoList operation middleware
func (siw *ServerInterfaceWrapper) CreateTodoList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodoList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodoList operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodoList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodoList(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoListById operation middleware
func (siw *ServerInterfaceWrapper) GetTodoListById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoListById(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodoList operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodoList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodoList(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCollaborators operation middleware
func (siw *ServerInterfaceWrapper) GetCollaborators(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCollaborators(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddCollaborator operation middleware
func (siw *ServerInterfaceWrapper) AddCollaborator(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddCollaborator(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveCollaborator operation middleware
func (siw *ServerInterfaceWrapper) RemoveCollaborator(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveCollaborator(w, r, listId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoItemsByListId operation middleware
func (siw *ServerInterfaceWrapper) GetTodoItemsByListId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoItemsByListId(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodoItem operation middleware
func (siw *ServerInterfaceWrapper) CreateTodoItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodoItem(w, r, listId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodoItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodoItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodoItem(w, r, listId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTodoItemById operation middleware
func (siw *ServerInterfaceWrapper) GetTodoItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoItemById(w, r, listId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodoItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodoItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "listId" -------------
	var listId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "listId", chi.URLParam(r, "listId"), &listId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodoItem(w, r, listId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersMe operation middleware
func (siw *ServerInterfaceWrapper) GetUsersMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/matrix/openid", wrapper.PostMatrixAuth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.PostRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todolists", wrapper.GetTodoListsByUserId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todolists", wrapper.CreateTodoList)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todolists/{listId}", wrapper.DeleteTodoList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todolists/{listId}", wrapper.GetTodoListById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todolists/{listId}", wrapper.UpdateTodoList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todolists/{listId}/collaborators", wrapper.GetCollaborators)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todolists/{listId}/collaborators", wrapper.AddCollaborator)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todolists/{listId}/collaborators/{userId}", wrapper.RemoveCollaborator)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todolists/{listId}/items", wrapper.GetTodoItemsByListId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todolists/{listId}/items", wrapper.CreateTodoItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todolists/{listId}/items/{itemId}", wrapper.DeleteTodoItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todolists/{listId}/items/{itemId}", wrapper.GetTodoItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todolists/{listId}/items/{itemId}", wrapper.UpdateTodoItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUsersMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUsersId)
	})

	return r
}
