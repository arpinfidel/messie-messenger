openapi: 3.0.0
info:
  title: Todo Microservice API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User with email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      security:
        - bearerAuth: []
      summary: Get current user profile
      responses:
        "200":
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/login-test:
    post:
      summary: Test email login and fetch recent message headers
      operationId: emailLoginTest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLoginRequest"
      responses:
        "200":
          description: Successfully fetched message headers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailMessagesResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/inbox:
    post:
      summary: List recent inbox message headers
      operationId: emailInbox
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLoginRequest"
      responses:
        "200":
          description: Successfully fetched inbox headers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailMessagesResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/important:
    post:
      summary: List recent important message headers (deprecated)
      deprecated: true
      operationId: emailImportant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLoginRequest"
      responses:
        "410":
          description: Endpoint deprecated. Use /email/list instead.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/list:
    post:
      summary: List recent message headers for a mailbox or flag query
      operationId: emailList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailListRequest"
      responses:
        "200":
          description: Successfully fetched headers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailMessagesResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/headers:
    post:
      summary: List recent email headers with threading metadata
      operationId: emailHeaders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLoginRequest"
      responses:
        "200":
          description: Successfully fetched rich headers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailRichHeadersResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /email/threads:
    post:
      summary: List recent email threads
      operationId: emailThreads
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLoginRequest"
      responses:
        "200":
          description: Successfully fetched thread headers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailMessagesResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /todolists:
    post:
      security:
        - bearerAuth: []
      summary: Create a new todo list
      operationId: createTodoList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodoList"
      responses:
        "201":
          description: Todo list created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
        "400":
          description: Invalid input
    get:
      security:
        - bearerAuth: []
      summary: Get todo lists by owner ID
      operationId: getTodoListsByUserId
      parameters:
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to retrieve todo lists for
      responses:
        "200":
          description: A list of todo lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoList"
  /todolists/{listId}:
    get:
      security:
        - bearerAuth: []
      summary: Get a todo list by ID
      operationId: getTodoListById
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list to retrieve
      responses:
        "200":
          description: Todo list found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
        "404":
          description: Todo list not found
    put:
      security:
        - bearerAuth: []
      summary: Update a todo list
      operationId: updateTodoList
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTodoList"
      responses:
        "200":
          description: Todo list updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
        "400":
          description: Invalid input
        "404":
          description: Todo list not found
    delete:
      security:
        - bearerAuth: []
      summary: Delete a todo list
      operationId: deleteTodoList
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list to delete
      responses:
        "204":
          description: Todo list deleted successfully
        "404":
          description: Todo list not found
  /todolists/{listId}/items:
    post:
      security:
        - bearerAuth: []
      summary: Create a new todo item in a list
      operationId: createTodoItem
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodoItem"
      responses:
        "201":
          description: Todo item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoItem"
        "400":
          description: Invalid input
        "404":
          description: Todo list not found
    get:
      security:
        - bearerAuth: []
      summary: Get todo items by list ID
      operationId: getTodoItemsByListId
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list to retrieve items for
      responses:
        "200":
          description: A list of todo items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoItem"
        "404":
          description: Todo list not found
  /todolists/{listId}/items/{itemId}:
    get:
      security:
        - bearerAuth: []
      summary: Get a todo item by ID
      operationId: getTodoItemById
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
        - in: path
          name: itemId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo item to retrieve
      responses:
        "200":
          description: Todo item found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoItem"
        "404":
          description: Todo item or list not found
    put:
      security:
        - bearerAuth: []
      summary: Update a todo item
      operationId: updateTodoItem
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
        - in: path
          name: itemId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo item to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTodoItem"
      responses:
        "200":
          description: Todo item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoItem"
        "400":
          description: Invalid input
        "404":
          description: Todo item or list not found
    delete:
      security:
        - bearerAuth: []
      summary: Delete a todo item
      operationId: deleteTodoItem
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
        - in: path
          name: itemId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo item to delete
      responses:
        "204":
          description: Todo item deleted successfully
        "404":
          description: Todo item or list not found
  /todolists/{listId}/collaborators:
    get:
      security:
        - bearerAuth: []
      summary: Get collaborators for a todo list
      operationId: getCollaborators
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list to retrieve collaborators for
      responses:
        "200":
          description: A list of collaborators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CollaboratorDetail"
        "404":
          description: Todo list not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - bearerAuth: []
      summary: Add a collaborator to a todo list
      operationId: addCollaborator
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCollaborator"
      responses:
        "201":
          description: Collaborator added successfully
        "400":
          description: Invalid input
        "404":
          description: Todo list or user not found
        "409":
          description: User is already a collaborator
  /todolists/{listId}/collaborators/{userId}:
    delete:
      security:
        - bearerAuth: []
      summary: Remove a collaborator from a todo list
      operationId: removeCollaborator
      parameters:
        - in: path
          name: listId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the todo list
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the user to remove as collaborator
      responses:
        "204":
          description: Collaborator removed successfully
        "404":
          description: Todo list or collaborator not found
  /auth/matrix/openid:
    post:
      summary: Authenticate using Matrix OpenID
      operationId: PostMatrixAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatrixOpenIDRequest"
      responses:
        "200":
          description: Matrix authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatrixAuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Matrix token verification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - matrix_id
      properties:
        id:
          type: string
          format: uuid
          description: ID of the user
        email:
          type: string
          format: email
          description: Email of the user
          example: "newuser@example.com"
        matrix_id:
          type: string
          description: Matrix ID of the user
          example: "@user:matrix.example.com"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
    CollaboratorDetail:
      type: object
      required:
        - list_id
        - collaborator_id
        - username
      properties:
        list_id:
          type: string
          format: uuid
          description: ID of the todo list
        username:
          type: string
          description: Collaborator username
          example: "123e4567-e89b-12d3-a456-426614174000"
        collaborator_id:
          type: string
          format: uuid
          description: ID of the collaborator user
          example: "123e4567-e89b-12d3-a456-426614174000"
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securepassword123"
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securepassword123"
    AuthResponse:
      type: object
      required:
        - user
        - token
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
          description: JWT token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "Something went wrong"
    TodoList:
      type: object
      required:
        - id
        - owner_id
        - title
        - description
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewTodoList:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
    UpdateTodoList:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
    TodoItem:
      type: object
      required:
        - id
        - list_id
        - title
        - completed
        - position
        - description
      properties:
        id:
          type: string
          format: uuid
        list_id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
        completed:
          type: boolean
        due_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        position:
          type: string
          description: Fractional index for ordering todo items within a list.
    NewTodoItem:
      type: object
      required:
        - list_id
        - title
        - position
        - description
        - completed
      properties:
        list_id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
        completed:
          type: boolean
          default: false
        due_date:
          type: string
          format: date-time
        position:
          type: string
    UpdateTodoItem:
      type: object
      required:
        - title
        - description
        - completed
        - position
      properties:
        title:
          type: string
          minLength: 1
          default: ""
        description:
          type: string
        completed:
          type: boolean
        due_date:
          type: string
          format: date-time
        position:
          type: string
    NewCollaborator:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          format: uuid
    MatrixOpenIDRequest:
      type: object
      required:
        - access_token
        - matrix_server_name
      properties:
        access_token:
          type: string
          description: Matrix OpenID access token
          example: "matrix_access_token_123"
        matrix_server_name:
          type: string
          description: Matrix homeserver name
          example: "matrix.example.com"
    MatrixAuthResponse:
      type: object
      required:
        - token
        - mxid
        - user_id
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        mxid:
          type: string
          description: Matrix user ID
          example: "@user:matrix.example.com"
        user_id:
          type: string
          format: uuid
          description: ID of the user in the todo service
          example: "123e4567-e89b-12d3-a456-426614174000"
    EmailLoginRequest:
      type: object
      required:
        - host
        - port
        - email
        - appPassword
      properties:
        host:
          type: string
        port:
          type: integer
          format: int32
        email:
          type: string
          format: email
        appPassword:
          type: string
          format: password
    EmailListRequest:
      allOf:
        - $ref: "#/components/schemas/EmailLoginRequest"
        - type: object
          properties:
            mailbox:
              type: string
              description: Mailbox name to select (defaults to INBOX when omitted)
            searchFlags:
              type: array
              description: Optional IMAP flags to filter on (e.g. ["\\Flagged"])
              items:
                type: string
    EmailMessageHeader:
      type: object
      properties:
        from:
          type: string
        subject:
          type: string
        date:
          type: string
          format: date-time
    EmailMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/EmailMessageHeader"
        unreadCount:
          type: integer
          format: int32
    EmailRichHeader:
      type: object
      properties:
        from:
          type: string
        subject:
          type: string
        date:
          type: string
          format: date-time
        messageId:
          type: string
        inReplyTo:
          type: string
        references:
          type: array
          items:
            type: string
    EmailRichHeadersResponse:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/EmailRichHeader"
